#!/usr/bin/env python3
"""
Giao di·ªán ng∆∞·ªùi d√πng Streamlit cho Clothing Store Chatbot.
"""

import os
import sys
import json
import logging
import requests
import streamlit as st
from typing import Dict, Any, List, Optional
import uuid
import time
from PIL import Image
import io
import base64

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import config

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("streamlit-ui")

# C·∫•u h√¨nh API
API_URL = f"http://localhost:{config.APP_PORT}/api"

# Wait for the API server to start
logger.info("Waiting for API server to start...")
max_retries = 5
for i in range(max_retries):
    try:
        response = requests.get(f"{API_URL}/health")
        if response.status_code == 200:
            logger.info("API server is ready")
            break
    except Exception:
        logger.info(f"API not ready yet, waiting... ({i+1}/{max_retries})")
        time.sleep(3)  # Wait 3 seconds before trying again

# C·∫•u h√¨nh giao di·ªán Streamlit
st.set_page_config(
    page_title=config.APP_NAME,
    page_icon="üëï",
    layout="wide",
    initial_sidebar_state="expanded"
)

# C√°c placeholder cho h√¨nh ·∫£nh s·∫£n ph·∫©m
DEFAULT_PRODUCT_IMAGE = "https://via.placeholder.com/150?text=No+Image"

# M√†u s·∫Øc v√† ki·ªÉu
PRIMARY_COLOR = "#ff5722"
SECONDARY_COLOR = "#4caf50"
BG_COLOR = "#f5f5f5"
TEXT_COLOR = "#212121"

def init_session_state():
    """Kh·ªüi t·∫°o c√°c bi·∫øn trong session state."""
    if "conversation_id" not in st.session_state:
        st.session_state.conversation_id = str(uuid.uuid4())
    
    if "messages" not in st.session_state:
        st.session_state.messages = []
        # Th√™m tin nh·∫Øn ch√†o m·ª´ng t·ª´ bot
        st.session_state.messages.append({
            "role": "assistant", 
            "content": config.DEFAULT_RESPONSES["greeting"]
        })
    
    if "cart" not in st.session_state:
        st.session_state.cart = []
    
    if "checkout" not in st.session_state:
        st.session_state.checkout = False
    
    if "order_result" not in st.session_state:
        st.session_state.order_result = None

def chat_with_bot(message: str) -> Dict[str, Any]:
    """
    G·ª≠i tin nh·∫Øn ƒë·∫øn API v√† nh·∫≠n ph·∫£n h·ªìi.
    
    Args:
        message: Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
        
    Returns:
        Ph·∫£n h·ªìi t·ª´ API d·∫°ng dictionary
    """
    try:
        response = requests.post(
            f"{API_URL}/chat",
            json={
                "message": message,
                "conversation_id": st.session_state.conversation_id,
                "session_data": {"cart": st.session_state.cart} if st.session_state.cart else {}
            }
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"Error from API: {response.status_code} - {response.text}")
            return {
                "response": config.DEFAULT_RESPONSES["fallback"],
                "intent": "error",
                "conversation_id": st.session_state.conversation_id
            }
    except Exception as e:
        logger.error(f"Error communicating with API: {str(e)}")
        return {
            "response": config.DEFAULT_RESPONSES["fallback"],
            "intent": "error",
            "conversation_id": st.session_state.conversation_id
        }

def get_product_inventory(product_id: str, size: Optional[str] = None, color: Optional[str] = None) -> Dict[str, Any]:
    """
    L·∫•y th√¥ng tin t·ªìn kho c·ªßa s·∫£n ph·∫©m.
    
    Args:
        product_id: ID c·ªßa s·∫£n ph·∫©m
        size: K√≠ch c·ª° (t√πy ch·ªçn)
        color: M√†u s·∫Øc (t√πy ch·ªçn)
        
    Returns:
        Th√¥ng tin t·ªìn kho d·∫°ng dictionary
    """
    try:
        url = f"{API_URL}/inventory/{product_id}"
        params = {}
        if size:
            params["size"] = size
        if color:
            params["color"] = color
            
        response = requests.get(url, params=params)
        
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"Error getting inventory: {response.status_code} - {response.text}")
            return {"status": "error", "message": "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t·ªìn kho"}
    except Exception as e:
        logger.error(f"Error getting inventory: {str(e)}")
        return {"status": "error", "message": str(e)}

def search_products(query: str) -> List[Dict[str, Any]]:
    """
    T√¨m ki·∫øm s·∫£n ph·∫©m.
    
    Args:
        query: T·ª´ kh√≥a t√¨m ki·∫øm
        
    Returns:
        Danh s√°ch s·∫£n ph·∫©m ph√π h·ª£p
    """
    try:
        response = requests.get(f"{API_URL}/products/search", params={"query": query})
        
        if response.status_code == 200:
            return response.json().get("results", [])
        else:
            logger.error(f"Error searching products: {response.status_code} - {response.text}")
            return []
    except Exception as e:
        logger.error(f"Error searching products: {str(e)}")
        return []

def create_order(order_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    T·∫°o ƒë∆°n h√†ng.
    
    Args:
        order_data: Th√¥ng tin ƒë∆°n h√†ng
        
    Returns:
        K·∫øt qu·∫£ ƒë·∫∑t h√†ng d·∫°ng dictionary
    """
    try:
        response = requests.post(f"{API_URL}/order", json=order_data)
        
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"Error creating order: {response.status_code} - {response.text}")
            error_msg = response.json().get("detail", "ƒê√£ x·∫£y ra l·ªói khi t·∫°o ƒë∆°n h√†ng")
            return {"status": "error", "message": error_msg}
    except Exception as e:
        logger.error(f"Error creating order: {str(e)}")
        return {"status": "error", "message": str(e)}

def add_to_cart(product_id: str, product_name: str, size: str, color: str, quantity: int, price: float):
    """
    Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.
    
    Args:
        product_id: ID c·ªßa s·∫£n ph·∫©m
        product_name: T√™n s·∫£n ph·∫©m
        size: K√≠ch c·ª°
        color: M√†u s·∫Øc
        quantity: S·ªë l∆∞·ª£ng
        price: Gi√° ti·ªÅn
    """
    # Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
    for item in st.session_state.cart:
        if (item["product_id"] == product_id and 
            item["size"] == size and 
            item["color"] == color):
            item["quantity"] += quantity
            return
    
    # Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng
    st.session_state.cart.append({
        "product_id": product_id,
        "product_name": product_name,
        "size": size,
        "color": color,
        "quantity": quantity,
        "price": price
    })

def display_messages():
    """Hi·ªÉn th·ªã l·ªãch s·ª≠ tin nh·∫Øn."""
    for message in st.session_state.messages:
        if message["role"] == "user":
            st.chat_message("user").write(message["content"])
        else:
            with st.chat_message("assistant"):
                st.write(message["content"])
                
                # Hi·ªÉn th·ªã th√¥ng tin b·ªï sung n·∫øu c√≥
                if "additional_data" in message and message["additional_data"]:
                    if "products" in message["additional_data"]:
                        st.subheader("S·∫£n ph·∫©m li√™n quan:")
                        
                        # Hi·ªÉn th·ªã s·∫£n ph·∫©m d·∫°ng l∆∞·ªõi
                        cols = st.columns(min(3, len(message["additional_data"]["products"])))
                        for i, product in enumerate(message["additional_data"]["products"]):
                            with cols[i % 3]:
                                st.image(DEFAULT_PRODUCT_IMAGE, width=150)
                                st.markdown(f"**{product['product_name']}**")
                                st.write(f"Gi√°: {product['price']:,} VND")
                                st.write(f"Tr·∫°ng th√°i: {'C√≤n h√†ng' if product['status'] == 'in_stock' else 'H·∫øt h√†ng'}")
                                
                                # T·∫°o c√°c selectbox cho size, m√†u s·∫Øc, v√† s·ªë l∆∞·ª£ng
                                if product["status"] == "in_stock":
                                    # L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m
                                    inventory = get_product_inventory(product["product_id"])
                                    
                                    if inventory["status"] != "error":
                                        sizes = inventory.get("sizes_available", [])
                                        colors = inventory.get("colors_available", [])
                                        
                                        selected_size = st.selectbox(f"Ch·ªçn size {i}", sizes, key=f"size_{product['product_id']}")
                                        selected_color = st.selectbox(f"Ch·ªçn m√†u {i}", colors, key=f"color_{product['product_id']}")
                                        selected_quantity = st.number_input(f"S·ªë l∆∞·ª£ng {i}", min_value=1, max_value=10, value=1, key=f"quantity_{product['product_id']}")
                                        
                                        if st.button(f"Th√™m v√†o gi·ªè h√†ng", key=f"add_to_cart_{product['product_id']}"):
                                            add_to_cart(
                                                product["product_id"],
                                                product["product_name"],
                                                selected_size,
                                                selected_color,
                                                selected_quantity,
                                                product["price"]
                                            )
                                            st.success(f"ƒê√£ th√™m {product['product_name']} v√†o gi·ªè h√†ng!")
                                            st.rerun()

def display_cart():
    """Hi·ªÉn th·ªã gi·ªè h√†ng."""
    if not st.session_state.cart:
        st.info("Gi·ªè h√†ng tr·ªëng")
        return
    
    st.subheader("Gi·ªè h√†ng c·ªßa b·∫°n")
    
    # T√≠nh t·ªïng ti·ªÅn
    total = sum(item["price"] * item["quantity"] for item in st.session_state.cart)
    
    # Hi·ªÉn th·ªã t·ª´ng s·∫£n ph·∫©m trong gi·ªè h√†ng
    for i, item in enumerate(st.session_state.cart):
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            st.write(f"**{item['product_name']}**")
            st.write(f"Size: {item['size']}, M√†u: {item['color']}")
            st.write(f"Gi√°: {item['price']:,} VND x {item['quantity']} = {item['price'] * item['quantity']:,} VND")
        
        with col2:
            new_quantity = st.number_input(
                f"S·ªë l∆∞·ª£ng", 
                min_value=1, 
                max_value=10, 
                value=item["quantity"],
                key=f"cart_quantity_{i}"
            )
            if new_quantity != item["quantity"]:
                st.session_state.cart[i]["quantity"] = new_quantity
                st.rerun()
        
        with col3:
            if st.button("X√≥a", key=f"remove_{i}"):
                st.session_state.cart.pop(i)
                st.rerun()
        
        st.divider()
    
    # Hi·ªÉn th·ªã t·ªïng ti·ªÅn
    st.markdown(f"### T·ªïng ti·ªÅn: {total:,} VND")
    
    # N√∫t thanh to√°n
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Ti·∫øp t·ª•c mua s·∫Øm"):
            st.session_state.checkout = False
            st.rerun()
    with col2:
        if st.button("Thanh to√°n ngay"):
            st.session_state.checkout = True
            st.rerun()

def display_checkout_form():
    """Hi·ªÉn th·ªã form thanh to√°n."""
    st.subheader("Th√¥ng tin thanh to√°n")
    
    # T·∫°o form
    with st.form("checkout_form"):
        st.write("Th√¥ng tin kh√°ch h√†ng")
        customer_name = st.text_input("H·ªç v√† t√™n *", help="Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n")
        col1, col2 = st.columns(2)
        with col1:
            customer_phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i *", help="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i li√™n h·ªá")
        with col2:
            customer_email = st.text_input("Email", help="Nh·∫≠p email ƒë·ªÉ nh·∫≠n th√¥ng tin ƒë∆°n h√†ng")
        
        customer_address = st.text_area("ƒê·ªãa ch·ªâ giao h√†ng *", help="Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ƒë·ªãa ch·ªâ")
        
        notes = st.text_area("Ghi ch√∫", help="Ghi ch√∫ th√™m v·ªÅ ƒë∆°n h√†ng")
        
        st.write("Xem l·∫°i ƒë∆°n h√†ng")
        for item in st.session_state.cart:
            st.write(f"- {item['product_name']} (Size: {item['size']}, M√†u: {item['color']}) x {item['quantity']}: {item['price'] * item['quantity']:,} VND")
        
        # T√≠nh t·ªïng ti·ªÅn
        subtotal = sum(item["price"] * item["quantity"] for item in st.session_state.cart)
        shipping_fee = 30000  # Ph√≠ ship m·∫∑c ƒë·ªãnh
        total = subtotal + shipping_fee
        
        st.write(f"T·∫°m t√≠nh: {subtotal:,} VND")
        st.write(f"Ph√≠ v·∫≠n chuy·ªÉn: {shipping_fee:,} VND")
        st.markdown(f"### T·ªïng c·ªông: {total:,} VND")
        
        # N√∫t ƒë·∫∑t h√†ng
        submit_button = st.form_submit_button("ƒê·∫∑t h√†ng")
        
        if submit_button:
            # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
            if not customer_name or not customer_phone or not customer_address:
                st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc")
                return
            
            # T·∫°o ƒë∆°n h√†ng
            order_items = []
            for item in st.session_state.cart:
                order_items.append({
                    "product_id": item["product_id"],
                    "size": item["size"],
                    "color": item["color"],
                    "quantity": item["quantity"]
                })
            
            order_data = {
                "customer_name": customer_name,
                "customer_phone": customer_phone,
                "customer_email": customer_email,
                "customer_address": customer_address,
                "items": order_items,
                "notes": notes
            }
            
            # G·ª≠i ƒë∆°n h√†ng ƒë·∫øn API
            result = create_order(order_data)
            
            # L∆∞u k·∫øt qu·∫£ ƒë∆°n h√†ng
            st.session_state.order_result = result
            
            # X√≥a gi·ªè h√†ng n·∫øu ƒë·∫∑t h√†ng th√†nh c√¥ng
            if result.get("status") == "success":
                st.session_state.cart = []
                st.session_state.checkout = False
                st.rerun()
            else:
                st.error(result.get("message", "ƒê√£ x·∫£y ra l·ªói khi ƒë·∫∑t h√†ng"))

def display_order_result():
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë·∫∑t h√†ng."""
    result = st.session_state.order_result
    
    if result.get("status") == "success":
        st.success("ƒê·∫∑t h√†ng th√†nh c√¥ng!")
        
        st.write("### Th√¥ng tin ƒë∆°n h√†ng")
        st.write(f"M√£ ƒë∆°n h√†ng: **{result['order_id']}**")
        
        # Hi·ªÉn th·ªã th√¥ng tin kh√°ch h√†ng
        st.write("### Th√¥ng tin kh√°ch h√†ng")
        customer = result["order_summary"]["customer"]
        st.write(f"H·ªç v√† t√™n: {customer['name']}")
        st.write(f"S·ªë ƒëi·ªán tho·∫°i: {customer['phone']}")
        if customer.get("email"):
            st.write(f"Email: {customer['email']}")
        st.write(f"ƒê·ªãa ch·ªâ: {customer['address']}")
        
        # Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
        st.write("### Danh s√°ch s·∫£n ph·∫©m")
        for item in result["order_summary"]["items"]:
            st.write(f"- {item['product_name']} (Size: {item['size']}, M√†u: {item['color']}) x {item['quantity']}: {item['total']:,} VND")
        
        # Hi·ªÉn th·ªã t·ªïng ti·ªÅn
        st.write(f"T·∫°m t√≠nh: {result['order_summary']['subtotal']:,} VND")
        st.write(f"Ph√≠ v·∫≠n chuy·ªÉn: {result['order_summary']['shipping']:,} VND")
        st.markdown(f"### T·ªïng c·ªông: {result['order_summary']['total']:,} VND")
        
        # N√∫t ti·∫øp t·ª•c mua s·∫Øm
        if st.button("Ti·∫øp t·ª•c mua s·∫Øm"):
            st.session_state.order_result = None
            st.rerun()
    else:
        st.error(result.get("message", "ƒê√£ x·∫£y ra l·ªói khi ƒë·∫∑t h√†ng"))
        
        # N√∫t th·ª≠ l·∫°i
        if st.button("Th·ª≠ l·∫°i"):
            st.session_state.order_result = None
            st.rerun()

def main():
    # Kh·ªüi t·∫°o session state
    init_session_state()
    
    # T·∫°o UI
    st.title("üëï Clothing Store Chatbot")
    
    # Sidebar
    with st.sidebar:
        st.header("Qu·∫£n l√Ω gi·ªè h√†ng")
        cart_count = len(st.session_state.cart)
        st.write(f"Gi·ªè h√†ng ({cart_count} s·∫£n ph·∫©m)")
        
        if cart_count > 0:
            if st.button("Xem gi·ªè h√†ng"):
                st.session_state.checkout = False
                st.rerun()
        
        st.divider()
        st.write("### T√¨m ki·∫øm s·∫£n ph·∫©m")
        search_query = st.text_input("Nh·∫≠p t√™n s·∫£n ph·∫©m")
        if st.button("T√¨m ki·∫øm"):
            if search_query:
                user_message = f"T√¨m ki·∫øm s·∫£n ph·∫©m: {search_query}"
                st.session_state.messages.append({"role": "user", "content": user_message})
                
                # G·ª≠i tin nh·∫Øn ƒë·∫øn chatbot
                response = chat_with_bot(user_message)
                
                # L∆∞u ph·∫£n h·ªìi
                st.session_state.messages.append({
                    "role": "assistant", 
                    "content": response["response"],
                    "additional_data": response.get("additional_data")
                })
                
                st.rerun()
        
        st.divider()
        st.write("### Th√¥ng tin li√™n h·ªá")
        st.write("Hotline: 1900.1234")
        st.write("Email: support@clothingstore.vn")
    
    # Main content
    if st.session_state.order_result:
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë·∫∑t h√†ng
        display_order_result()
    elif st.session_state.checkout:
        # Hi·ªÉn th·ªã form thanh to√°n
        display_checkout_form()
    elif cart_count > 0 and len(st.session_state.messages) > 0 and st.session_state.messages[-1].get("role") == "user" and "xem gi·ªè h√†ng" in st.session_state.messages[-1].get("content", "").lower():
        # Hi·ªÉn th·ªã gi·ªè h√†ng khi ng∆∞·ªùi d√πng y√™u c·∫ßu
        display_cart()
    else:
        # Hi·ªÉn th·ªã l·ªãch s·ª≠ tin nh·∫Øn
        display_messages()
        
        # Khung chat
        if prompt := st.chat_input("Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."):
            # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
            st.session_state.messages.append({"role": "user", "content": prompt})
            
            # Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
            st.chat_message("user").write(prompt)
            
            # X·ª≠ l√Ω c√°c l·ªánh ƒë·∫∑c bi·ªát
            if prompt.lower() in ["xem gi·ªè h√†ng", "gi·ªè h√†ng", "cart"]:
                # Hi·ªÉn th·ªã gi·ªè h√†ng
                with st.chat_message("assistant"):
                    if cart_count > 0:
                        st.write("ƒê√¢y l√† gi·ªè h√†ng c·ªßa b·∫°n:")
                        display_cart()
                    else:
                        st.write("Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.")
                
                st.session_state.messages.append({
                    "role": "assistant", 
                    "content": "ƒê√¢y l√† gi·ªè h√†ng c·ªßa b·∫°n." if cart_count > 0 else "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng."
                })
            else:
                # G·ª≠i tin nh·∫Øn ƒë·∫øn chatbot
                with st.spinner("ƒêang x·ª≠ l√Ω..."):
                    response = chat_with_bot(prompt)
                
                # Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa chatbot
                with st.chat_message("assistant"):
                    st.write(response["response"])
                    
                    # Hi·ªÉn th·ªã th√¥ng tin b·ªï sung n·∫øu c√≥
                    if "additional_data" in response and response["additional_data"]:
                        if "products" in response["additional_data"]:
                            st.subheader("S·∫£n ph·∫©m li√™n quan:")
                            
                            # Hi·ªÉn th·ªã s·∫£n ph·∫©m d·∫°ng l∆∞·ªõi
                            cols = st.columns(min(3, len(response["additional_data"]["products"])))
                            for i, product in enumerate(response["additional_data"]["products"]):
                                with cols[i % 3]:
                                    st.image(DEFAULT_PRODUCT_IMAGE, width=150)
                                    st.markdown(f"**{product['product_name']}**")
                                    st.write(f"Gi√°: {product['price']:,} VND")
                                    st.write(f"Tr·∫°ng th√°i: {'C√≤n h√†ng' if product['status'] == 'in_stock' else 'H·∫øt h√†ng'}")
                                    
                                    # T·∫°o c√°c selectbox cho size, m√†u s·∫Øc, v√† s·ªë l∆∞·ª£ng
                                    if product["status"] == "in_stock":
                                        # L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m
                                        inventory = get_product_inventory(product["product_id"])
                                        
                                        if inventory["status"] != "error":
                                            sizes = inventory.get("sizes_available", [])
                                            colors = inventory.get("colors_available", [])
                                            
                                            selected_size = st.selectbox(f"Ch·ªçn size {i}", sizes, key=f"size_{product['product_id']}")
                                            selected_color = st.selectbox(f"Ch·ªçn m√†u {i}", colors, key=f"color_{product['product_id']}")
                                            selected_quantity = st.number_input(f"S·ªë l∆∞·ª£ng {i}", min_value=1, max_value=10, value=1, key=f"quantity_{product['product_id']}")
                                            
                                            if st.button(f"Th√™m v√†o gi·ªè h√†ng", key=f"add_to_cart_{product['product_id']}"):
                                                add_to_cart(
                                                    product["product_id"],
                                                    product["product_name"],
                                                    selected_size,
                                                    selected_color,
                                                    selected_quantity,
                                                    product["price"]
                                                )
                                                st.success(f"ƒê√£ th√™m {product['product_name']} v√†o gi·ªè h√†ng!")
                
                # L∆∞u ph·∫£n h·ªìi
                st.session_state.messages.append({
                    "role": "assistant", 
                    "content": response["response"],
                    "additional_data": response.get("additional_data")
                })

if __name__ == "__main__":
    main() 